"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGoogleClient = getGoogleClient;
exports.GoogleKuber = GoogleKuber;

var _googleAuthLibrary = require("google-auth-library");

var _kubernetesClient = require("kubernetes-client");

var _kuber = _interopRequireDefault(require("../kuber"));

async function getGoogleClient(zone, clusterId) {
  const authClient = await _googleAuthLibrary.auth.getClient({
    scopes: 'https://www.googleapis.com/auth/cloud-platform'
  });
  const projectId = await _googleAuthLibrary.auth.getProjectId();
  const clusterPath = `projects/${projectId}/locations/${zone}/clusters/${clusterId}`;
  const {
    data: cluster
  } = await authClient.request({
    url: `https://container.googleapis.com/v1beta1/${clusterPath}`
  });

  if (cluster.error) {
    throw new Error(cluster.error.message);
  }

  const {
    token
  } = await authClient.getAccessToken();
  const kubeConfig = {
    apiVersion: "v1",
    kind: "Config",
    preferences: {},
    "current-context": "a",
    contexts: [{
      name: "a",
      context: {
        cluster: "a",
        user: "a"
      }
    }],
    clusters: [{
      name: "a",
      cluster: {
        "certificate-authority-data": cluster.masterAuth.clusterCaCertificate,
        server: `https://${cluster.endpoint}`
      }
    }],
    users: [{
      name: "a",
      user: {
        "auth-provider": {
          config: {
            "access-token": token,
            "cmd-args": "config config-helper --format=json",
            "cmd-path": "/google/google-cloud-sdk/bin/gcloud",
            "token-key": "{.credential.access_token}"
          },
          name: "gcp"
        }
      }
    }]
  };
  const clientApi = new _kubernetesClient.Client1_13({
    config: _kubernetesClient.config.fromKubeconfig(kubeConfig)
  });
  return clientApi.loadSpec();
}

async function GoogleKuber(zone, clusterId, defaultNamespace = 'default') {
  const client = await getGoogleClient(zone, clusterId);
  return (0, _kuber.default)(client, defaultNamespace);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnRzL2dvb2dsZS50cyJdLCJuYW1lcyI6WyJnZXRHb29nbGVDbGllbnQiLCJ6b25lIiwiY2x1c3RlcklkIiwiYXV0aENsaWVudCIsImF1dGgiLCJnZXRDbGllbnQiLCJzY29wZXMiLCJwcm9qZWN0SWQiLCJnZXRQcm9qZWN0SWQiLCJjbHVzdGVyUGF0aCIsImRhdGEiLCJjbHVzdGVyIiwicmVxdWVzdCIsInVybCIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwidG9rZW4iLCJnZXRBY2Nlc3NUb2tlbiIsImt1YmVDb25maWciLCJhcGlWZXJzaW9uIiwia2luZCIsInByZWZlcmVuY2VzIiwiY29udGV4dHMiLCJuYW1lIiwiY29udGV4dCIsInVzZXIiLCJjbHVzdGVycyIsIm1hc3RlckF1dGgiLCJjbHVzdGVyQ2FDZXJ0aWZpY2F0ZSIsInNlcnZlciIsImVuZHBvaW50IiwidXNlcnMiLCJjb25maWciLCJjbGllbnRBcGkiLCJDbGllbnQxXzEzIiwiZnJvbUt1YmVjb25maWciLCJsb2FkU3BlYyIsIkdvb2dsZUt1YmVyIiwiZGVmYXVsdE5hbWVzcGFjZSIsImNsaWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVPLGVBQWVBLGVBQWYsQ0FBK0JDLElBQS9CLEVBQTZDQyxTQUE3QyxFQUFnRTtBQUNyRSxRQUFNQyxVQUFVLEdBQUcsTUFBTUMsd0JBQUtDLFNBQUwsQ0FBZTtBQUN0Q0MsSUFBQUEsTUFBTSxFQUFFO0FBRDhCLEdBQWYsQ0FBekI7QUFHQSxRQUFNQyxTQUFTLEdBQUcsTUFBTUgsd0JBQUtJLFlBQUwsRUFBeEI7QUFDQSxRQUFNQyxXQUFXLEdBQUksWUFBV0YsU0FBVSxjQUFhTixJQUFLLGFBQVlDLFNBQVUsRUFBbEY7QUFDQSxRQUFNO0FBQUVRLElBQUFBLElBQUksRUFBRUM7QUFBUixNQUFvQixNQUFNUixVQUFVLENBQUNTLE9BQVgsQ0FBbUI7QUFBRUMsSUFBQUEsR0FBRyxFQUFHLDRDQUEyQ0osV0FBWTtBQUEvRCxHQUFuQixDQUFoQzs7QUFDQSxNQUFJRSxPQUFPLENBQUNHLEtBQVosRUFBbUI7QUFDakIsVUFBTSxJQUFJQyxLQUFKLENBQVVKLE9BQU8sQ0FBQ0csS0FBUixDQUFjRSxPQUF4QixDQUFOO0FBQ0Q7O0FBQ0QsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQVksTUFBTWQsVUFBVSxDQUFDZSxjQUFYLEVBQXhCO0FBQ0EsUUFBTUMsVUFBVSxHQUFHO0FBQ2pCQyxJQUFBQSxVQUFVLEVBQUUsSUFESztBQUVqQkMsSUFBQUEsSUFBSSxFQUFFLFFBRlc7QUFHakJDLElBQUFBLFdBQVcsRUFBRSxFQUhJO0FBSWpCLHVCQUFtQixHQUpGO0FBS2pCQyxJQUFBQSxRQUFRLEVBQUUsQ0FDUjtBQUNFQyxNQUFBQSxJQUFJLEVBQUUsR0FEUjtBQUVFQyxNQUFBQSxPQUFPLEVBQUU7QUFDUGQsUUFBQUEsT0FBTyxFQUFFLEdBREY7QUFFUGUsUUFBQUEsSUFBSSxFQUFFO0FBRkM7QUFGWCxLQURRLENBTE87QUFjakJDLElBQUFBLFFBQVEsRUFBRSxDQUNSO0FBQ0VILE1BQUFBLElBQUksRUFBRSxHQURSO0FBRUViLE1BQUFBLE9BQU8sRUFBRTtBQUNQLHNDQUNFQSxPQUFPLENBQUNpQixVQUFSLENBQW1CQyxvQkFGZDtBQUdQQyxRQUFBQSxNQUFNLEVBQUcsV0FBVW5CLE9BQU8sQ0FBQ29CLFFBQVM7QUFIN0I7QUFGWCxLQURRLENBZE87QUF3QmpCQyxJQUFBQSxLQUFLLEVBQUUsQ0FDTDtBQUNFUixNQUFBQSxJQUFJLEVBQUUsR0FEUjtBQUVFRSxNQUFBQSxJQUFJLEVBQUU7QUFDSix5QkFBaUI7QUFDZk8sVUFBQUEsTUFBTSxFQUFFO0FBQ04sNEJBQWdCaEIsS0FEVjtBQUVOLHdCQUFZLG9DQUZOO0FBR04sd0JBQVkscUNBSE47QUFJTix5QkFBYTtBQUpQLFdBRE87QUFPZk8sVUFBQUEsSUFBSSxFQUFFO0FBUFM7QUFEYjtBQUZSLEtBREs7QUF4QlUsR0FBbkI7QUEwQ0EsUUFBTVUsU0FBYyxHQUFHLElBQUlDLDRCQUFKLENBQWU7QUFDcENGLElBQUFBLE1BQU0sRUFBRUEseUJBQU9HLGNBQVAsQ0FBc0JqQixVQUF0QjtBQUQ0QixHQUFmLENBQXZCO0FBSUEsU0FBT2UsU0FBUyxDQUFDRyxRQUFWLEVBQVA7QUFDRDs7QUFFTSxlQUFlQyxXQUFmLENBQTJCckMsSUFBM0IsRUFBeUNDLFNBQXpDLEVBQTREcUMsZ0JBQWdCLEdBQUcsU0FBL0UsRUFBMEY7QUFDL0YsUUFBTUMsTUFBTSxHQUFHLE1BQU14QyxlQUFlLENBQUNDLElBQUQsRUFBT0MsU0FBUCxDQUFwQztBQUNBLFNBQU8sb0JBQU1zQyxNQUFOLEVBQWNELGdCQUFkLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF1dGggfSBmcm9tICdnb29nbGUtYXV0aC1saWJyYXJ5J1xuaW1wb3J0IHsgQ2xpZW50MV8xMywgY29uZmlnIH0gZnJvbSAna3ViZXJuZXRlcy1jbGllbnQnXG5pbXBvcnQgS3ViZXIgZnJvbSAnLi4va3ViZXInXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRHb29nbGVDbGllbnQoem9uZTogc3RyaW5nLCBjbHVzdGVySWQ6IHN0cmluZykge1xuICBjb25zdCBhdXRoQ2xpZW50ID0gYXdhaXQgYXV0aC5nZXRDbGllbnQoe1xuICAgIHNjb3BlczogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm0nXG4gIH0pXG4gIGNvbnN0IHByb2plY3RJZCA9IGF3YWl0IGF1dGguZ2V0UHJvamVjdElkKClcbiAgY29uc3QgY2x1c3RlclBhdGggPSBgcHJvamVjdHMvJHtwcm9qZWN0SWR9L2xvY2F0aW9ucy8ke3pvbmV9L2NsdXN0ZXJzLyR7Y2x1c3RlcklkfWBcbiAgY29uc3QgeyBkYXRhOiBjbHVzdGVyIH0gPSBhd2FpdCBhdXRoQ2xpZW50LnJlcXVlc3QoeyB1cmw6IGBodHRwczovL2NvbnRhaW5lci5nb29nbGVhcGlzLmNvbS92MWJldGExLyR7Y2x1c3RlclBhdGh9YCB9KVxuICBpZiAoY2x1c3Rlci5lcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihjbHVzdGVyLmVycm9yLm1lc3NhZ2UpXG4gIH1cbiAgY29uc3QgeyB0b2tlbiB9ID0gYXdhaXQgYXV0aENsaWVudC5nZXRBY2Nlc3NUb2tlbigpXG4gIGNvbnN0IGt1YmVDb25maWcgPSB7XG4gICAgYXBpVmVyc2lvbjogXCJ2MVwiLFxuICAgIGtpbmQ6IFwiQ29uZmlnXCIsXG4gICAgcHJlZmVyZW5jZXM6IHt9LFxuICAgIFwiY3VycmVudC1jb250ZXh0XCI6IFwiYVwiLFxuICAgIGNvbnRleHRzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYVwiLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgY2x1c3RlcjogXCJhXCIsXG4gICAgICAgICAgdXNlcjogXCJhXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF0sXG4gICAgY2x1c3RlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJhXCIsXG4gICAgICAgIGNsdXN0ZXI6IHtcbiAgICAgICAgICBcImNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhXCI6XG4gICAgICAgICAgICBjbHVzdGVyLm1hc3RlckF1dGguY2x1c3RlckNhQ2VydGlmaWNhdGUsXG4gICAgICAgICAgc2VydmVyOiBgaHR0cHM6Ly8ke2NsdXN0ZXIuZW5kcG9pbnR9YFxuICAgICAgICB9XG4gICAgICB9XG4gICAgXSxcbiAgICB1c2VyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImFcIixcbiAgICAgICAgdXNlcjoge1xuICAgICAgICAgIFwiYXV0aC1wcm92aWRlclwiOiB7XG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgXCJhY2Nlc3MtdG9rZW5cIjogdG9rZW4sXG4gICAgICAgICAgICAgIFwiY21kLWFyZ3NcIjogXCJjb25maWcgY29uZmlnLWhlbHBlciAtLWZvcm1hdD1qc29uXCIsXG4gICAgICAgICAgICAgIFwiY21kLXBhdGhcIjogXCIvZ29vZ2xlL2dvb2dsZS1jbG91ZC1zZGsvYmluL2djbG91ZFwiLFxuICAgICAgICAgICAgICBcInRva2VuLWtleVwiOiBcInsuY3JlZGVudGlhbC5hY2Nlc3NfdG9rZW59XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuYW1lOiBcImdjcFwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9XG5cbiAgY29uc3QgY2xpZW50QXBpOiBhbnkgPSBuZXcgQ2xpZW50MV8xMyh7XG4gICAgY29uZmlnOiBjb25maWcuZnJvbUt1YmVjb25maWcoa3ViZUNvbmZpZylcbiAgfSlcblxuICByZXR1cm4gY2xpZW50QXBpLmxvYWRTcGVjKClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdvb2dsZUt1YmVyKHpvbmU6IHN0cmluZywgY2x1c3RlcklkOiBzdHJpbmcsIGRlZmF1bHROYW1lc3BhY2UgPSAnZGVmYXVsdCcpIHtcbiAgY29uc3QgY2xpZW50ID0gYXdhaXQgZ2V0R29vZ2xlQ2xpZW50KHpvbmUsIGNsdXN0ZXJJZClcbiAgcmV0dXJuIEt1YmVyKGNsaWVudCwgZGVmYXVsdE5hbWVzcGFjZSlcbn1cbiJdfQ==