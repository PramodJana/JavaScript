"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Kuber;

var _child_process = require("child_process");

function Kuber(client, defaultNamespace = 'default') {
  return {
    client,
    defaultNamespace,

    createNamespace(body) {
      return client.api.v1.namespaces.post({
        body
      });
    },

    createSecret(body, namespace = defaultNamespace) {
      return client.api.v1.namespaces(namespace).secrets.post({
        body
      });
    },

    createDeployment(body, namespace = defaultNamespace) {
      const [apiName, apiVersion] = body.apiVersion.split("/");
      return client.apis[apiName][apiVersion].namespaces(namespace).deployments.post({
        body
      });
    },

    createService(body, namespace = defaultNamespace) {
      return client.api.v1.namespaces(namespace).services.post({
        body
      });
    },

    createIngress(body, namespace = defaultNamespace) {
      return client.apis.extensions.v1beta1.namespaces(namespace).ingresses.post({
        body
      });
    },

    createPersistentVolume(body) {
      return client.api.v1.persistentvolumes.post({
        body
      });
    },

    createPersistentVolumeClaim(body, namespace = defaultNamespace) {
      return client.api.v1.namespaces(namespace).persistentvolumeclaims.post({
        body
      });
    },

    getPods(namespace = defaultNamespace) {
      return client.api.v1.namespaces(namespace).pods.get();
    },

    async getPod(namespace = defaultNamespace, containerName) {
      const {
        body: {
          items: pods
        }
      } = await client.api.v1.namespaces(namespace).pods.get();
      const wordpressPod = pods.find(pod => !!pod.spec.containers.find(container => container.name === containerName));

      if (!wordpressPod) {
        throw new Error(`Failed to find a wordpress pod for site: ${namespace}`);
      }

      return wordpressPod;
    },

    kubectl(cmd) {
      return (0, _child_process.exec)(`kubectl ${cmd}`);
    },

    copy(from, to, options) {
      let cmd = `kubectl cp ${from} ${to}`;

      if (options && options.namespace) {
        cmd += ` --namespace ${options.namespace}`;
      }

      if (options && options.container) {
        cmd += ` --container ${options.container}`;
      }

      return (0, _child_process.exec)(cmd);
    },

    exec(cmd) {
      return (0, _child_process.exec)(`kubectl exec ${cmd}`);
    }

  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9rdWJlci50cyJdLCJuYW1lcyI6WyJLdWJlciIsImNsaWVudCIsImRlZmF1bHROYW1lc3BhY2UiLCJjcmVhdGVOYW1lc3BhY2UiLCJib2R5IiwiYXBpIiwidjEiLCJuYW1lc3BhY2VzIiwicG9zdCIsImNyZWF0ZVNlY3JldCIsIm5hbWVzcGFjZSIsInNlY3JldHMiLCJjcmVhdGVEZXBsb3ltZW50IiwiYXBpTmFtZSIsImFwaVZlcnNpb24iLCJzcGxpdCIsImFwaXMiLCJkZXBsb3ltZW50cyIsImNyZWF0ZVNlcnZpY2UiLCJzZXJ2aWNlcyIsImNyZWF0ZUluZ3Jlc3MiLCJleHRlbnNpb25zIiwidjFiZXRhMSIsImluZ3Jlc3NlcyIsImNyZWF0ZVBlcnNpc3RlbnRWb2x1bWUiLCJwZXJzaXN0ZW50dm9sdW1lcyIsImNyZWF0ZVBlcnNpc3RlbnRWb2x1bWVDbGFpbSIsInBlcnNpc3RlbnR2b2x1bWVjbGFpbXMiLCJnZXRQb2RzIiwicG9kcyIsImdldCIsImdldFBvZCIsImNvbnRhaW5lck5hbWUiLCJpdGVtcyIsIndvcmRwcmVzc1BvZCIsImZpbmQiLCJwb2QiLCJzcGVjIiwiY29udGFpbmVycyIsImNvbnRhaW5lciIsIm5hbWUiLCJFcnJvciIsImt1YmVjdGwiLCJjbWQiLCJjb3B5IiwiZnJvbSIsInRvIiwib3B0aW9ucyIsImV4ZWMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFZSxTQUFTQSxLQUFULENBQWVDLE1BQWYsRUFBNEJDLGdCQUFnQixHQUFHLFNBQS9DLEVBQTBEO0FBQ3ZFLFNBQU87QUFDTEQsSUFBQUEsTUFESztBQUVMQyxJQUFBQSxnQkFGSzs7QUFJTEMsSUFBQUEsZUFBZSxDQUFDQyxJQUFELEVBQVk7QUFDekIsYUFBT0gsTUFBTSxDQUFDSSxHQUFQLENBQVdDLEVBQVgsQ0FBY0MsVUFBZCxDQUF5QkMsSUFBekIsQ0FBOEI7QUFBRUosUUFBQUE7QUFBRixPQUE5QixDQUFQO0FBQ0QsS0FOSTs7QUFRTEssSUFBQUEsWUFB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QUosQ0FBVyw0Q0FBMkMvQixTQUFVLEVBQWhFLENBQU47QUFDRDs7QUFDRCxhQUFPd0IsWUFBUDtBQUNELEtBbERJOztBQW9ETFEsSUFBQUEsT0FBTyxDQUFDQyxHQUFELEVBQTRCO0FBQ2pDLGFBQU8seUJBQU0sV0FBVUEsR0FBSSxFQUFwQixDQUFQO0FBQ0QsS0F0REk7O0FBd0RMQyxJQUFBQSxJQUFJLENBQUNDLElBQUQsRUFBZUMsRUFBZixFQUEyQkMsT0FBM0IsRUFBNkY7QUFDL0YsVUFBSUosR0FBRyxHQUFJLGNBQWFFLElBQUssSUFBR0MsRUFBRyxFQUFuQzs7QUFDQSxVQUFJQyxPQUFPLElBQUlBLE9BQU8sQ0FBQ3JDLFNBQXZCLEVBQWtDO0FBQ2hDaUMsUUFBQUEsR0FBRyxJQUFLLGdCQUFlSSxPQUFPLENBQUNyQyxTQUFVLEVBQXpDO0FBQ0Q7O0FBQ0QsVUFBSXFDLE9BQU8sSUFBSUEsT0FBTyxDQUFDUixTQUF2QixFQUFrQztBQUNoQ0ksUUFBQUEsR0FBRyxJQUFLLGdCQUFlSSxPQUFPLENBQUNSLFNBQVUsRUFBekM7QUFDRDs7QUFDRCxhQUFPLHlCQUFLSSxHQUFMLENBQVA7QUFDRCxLQWpFSTs7QUFtRUxLLElBQUFBLElBQUksQ0FBQ0wsR0FBRCxFQUE0QjtBQUM5QixhQUFPLHlCQUFNLGdCQUFlQSxHQUFJLEVBQXpCLENBQVA7QUFDRDs7QUFyRUksR0FBUDtBQXVFRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMsIENoaWxkUHJvY2VzcyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEt1YmVyKGNsaWVudDogYW55LCBkZWZhdWx0TmFtZXNwYWNlID0gJ2RlZmF1bHQnKSB7XG4gIHJldHVybiB7XG4gICAgY2xpZW50LFxuICAgIGRlZmF1bHROYW1lc3BhY2UsXG5cbiAgICBjcmVhdGVOYW1lc3BhY2UoYm9keTogYW55KSB7XG4gICAgICByZXR1cm4gY2xpZW50LmFwaS52MS5uYW1lc3BhY2VzLnBvc3QoeyBib2R5IH0pXG4gICAgfSxcblxuICAgIGNyZWF0ZVNlY3JldChib2R5OiBhbnksIG5hbWVzcGFjZSA9IGRlZmF1bHROYW1lc3BhY2UpIHtcbiAgICAgIHJldHVybiBjbGllbnQuYXBpLnYxLm5hbWVzcGFjZXMobmFtZXNwYWNlKS5zZWNyZXRzLnBvc3QoeyBib2R5IH0pXG4gICAgfSxcblxuICAgIGNyZWF0ZURlcGxveW1lbnQoYm9keTogYW55LCBuYW1lc3BhY2UgPSBkZWZhdWx0TmFtZXNwYWNlKSB7XG4gICAgICBjb25zdCBbYXBpTmFtZSwgYXBpVmVyc2lvbl0gPSBib2R5LmFwaVZlcnNpb24uc3BsaXQoXCIvXCIpXG4gICAgICByZXR1cm4gY2xpZW50LmFwaXNbYXBpTmFtZV1bYXBpVmVyc2lvbl1cbiAgICAgICAgLm5hbWVzcGFjZXMobmFtZXNwYWNlKVxuICAgICAgICAuZGVwbG95bWVudHMucG9zdCh7IGJvZHkgfSlcbiAgICB9LFxuXG4gICAgY3JlYXRlU2VydmljZShib2R5OiBhbnksIG5hbWVzcGFjZSA9IGRlZmF1bHROYW1lc3BhY2UpIHtcbiAgICAgIHJldHVybiBjbGllbnQuYXBpLnYxLm5hbWVzcGFjZXMobmFtZXNwYWNlKS5zZXJ2aWNlcy5wb3N0KHsgYm9keSB9KVxuICAgIH0sXG5cbiAgICBjcmVhdGVJbmdyZXNzKGJvZHk6IGFueSwgbmFtZXNwYWNlID0gZGVmYXVsdE5hbWVzcGFjZSkge1xuICAgICAgcmV0dXJuIGNsaWVudC5hcGlzLmV4dGVuc2lvbnMudjFiZXRhMVxuICAgICAgICAubmFtZXNwYWNlcyhuYW1lc3BhY2UpXG4gICAgICAgIC5pbmdyZXNzZXMucG9zdCh7IGJvZHkgfSlcbiAgICB9LFxuXG4gICAgY3JlYXRlUGVyc2lzdGVudFZvbHVtZShib2R5OiBhbnkpIHtcbiAgICAgIHJldHVybiBjbGllbnQuYXBpLnYxLnBlcnNpc3RlbnR2b2x1bWVzLnBvc3QoeyBib2R5IH0pXG4gICAgfSxcblxuICAgIGNyZWF0ZVBlcnNpc3RlbnRWb2x1bWVDbGFpbShib2R5OiBhbnksIG5hbWVzcGFjZSA9IGRlZmF1bHROYW1lc3BhY2UpIHtcbiAgICAgIHJldHVybiBjbGllbnQuYXBpLnYxXG4gICAgICAgIC5uYW1lc3BhY2VzKG5hbWVzcGFjZSlcbiAgICAgICAgLnBlcnNpc3RlbnR2b2x1bWVjbGFpbXMucG9zdCh7IGJvZHkgfSlcbiAgICB9LFxuXG4gICAgZ2V0UG9kcyhuYW1lc3BhY2UgPSBkZWZhdWx0TmFtZXNwYWNlKSB7XG4gICAgICByZXR1cm4gY2xpZW50LmFwaS52MS5uYW1lc3BhY2VzKG5hbWVzcGFjZSkucG9kcy5nZXQoKVxuICAgIH0sXG5cbiAgICBhc3luYyBnZXRQb2QobmFtZXNwYWNlID0gZGVmYXVsdE5hbWVzcGFjZSwgY29udGFpbmVyTmFtZTogc3RyaW5nKSB7XG4gICAgICBjb25zdCB7IGJvZHk6IHsgaXRlbXM6IHBvZHMgfSB9ID0gYXdhaXQgY2xpZW50LmFwaS52MS5uYW1lc3BhY2VzKG5hbWVzcGFjZSkucG9kcy5nZXQoKVxuICAgICAgY29uc3Qgd29yZHByZXNzUG9kID0gcG9kcy5maW5kKChwb2Q6IGFueSkgPT4gISFwb2Quc3BlYy5jb250YWluZXJzLmZpbmQoKGNvbnRhaW5lcjogYW55KSA9PiBjb250YWluZXIubmFtZSA9PT0gY29udGFpbmVyTmFtZSkpXG4gICAgICBpZiAoIXdvcmRwcmVzc1BvZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmaW5kIGEgd29yZHByZXNzIHBvZCBmb3Igc2l0ZTogJHtuYW1lc3BhY2V9YClcbiAgICAgIH1cbiAgICAgIHJldHVybiB3b3JkcHJlc3NQb2RcbiAgICB9LFxuXG4gICAga3ViZWN0bChjbWQ6IHN0cmluZyk6IENoaWxkUHJvY2VzcyB7XG4gICAgICByZXR1cm4gZXhlYyhga3ViZWN0bCAke2NtZH1gKVxuICAgIH0sXG5cbiAgICBjb3B5KGZyb206IHN0cmluZywgdG86IHN0cmluZywgb3B0aW9ucz86IHsgbmFtZXNwYWNlOiBzdHJpbmcsIGNvbnRhaW5lcjogc3RyaW5nIH0pOiBDaGlsZFByb2Nlc3Mge1xuICAgICAgbGV0IGNtZCA9IGBrdWJlY3RsIGNwICR7ZnJvbX0gJHt0b31gXG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm5hbWVzcGFjZSkge1xuICAgICAgICBjbWQgKz0gYCAtLW5hbWVzcGFjZSAke29wdGlvbnMubmFtZXNwYWNlfWBcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29udGFpbmVyKSB7XG4gICAgICAgIGNtZCArPSBgIC0tY29udGFpbmVyICR7b3B0aW9ucy5jb250YWluZXJ9YFxuICAgICAgfVxuICAgICAgcmV0dXJuIGV4ZWMoY21kKVxuICAgIH0sXG5cbiAgICBleGVjKGNtZDogc3RyaW5nKTogQ2hpbGRQcm9jZXNzIHtcbiAgICAgIHJldHVybiBleGVjKGBrdWJlY3RsIGV4ZWMgJHtjbWR9YClcbiAgICB9XG4gIH1cbn1cbiJdfQ==